#version 120

/*
  Author: Kevin D Patino Sosa
  Class: ECE6122-A
  Last Date Modified: 10/10/2023
  Description: Lab2
*/

// Interpolated values from the vertex shaders
varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform sampler2D myTextureSamplerWolf;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform int lightEnabled;
uniform int textureControl;

void main()
{

    // Light emission properties
    // You probably want to put them as uniforms
    vec3 LightColor = vec3(1, 1, 1);
    float LightPower = 50.0f;

    vec3 MaterialDiffuseColor;
    // Material properties
    if (textureControl == 1)
    {
        MaterialDiffuseColor = texture2D(myTextureSampler, UV).rgb;
    }
    else
    {
        MaterialDiffuseColor = texture2D(myTextureSamplerWolf, UV).rgb;
    }
    vec3 MaterialAmbientColor = vec3(0.1, 0.1, 0.1) * MaterialDiffuseColor;
    vec3 MaterialSpecularColor = vec3(0.3, 0.3, 0.3);

    // Distance to the light
    float distance = length(LightPosition_worldspace - Position_worldspace);

    // Normal of the computed fragment, in camera space
    vec3 n = normalize(Normal_cameraspace);
    // Direction of the light (from the fragment to the light)
    vec3 l = normalize(LightDirection_cameraspace);
    // Cosine of the angle between the normal and the light direction,
    // clamped above 0
    //  - light is at the vertical of the triangle -> 1
    //  - light is perpendicular to the triangle -> 0
    //  - light is behind the triangle -> 0
    float cosTheta = clamp(dot(n, l), 0, 1);

    // Eye vector (towards the camera)
    vec3 E = normalize(EyeDirection_cameraspace);
    // Direction in which the triangle reflects the light
    vec3 R = reflect(-l, n);
    // Cosine of the angle between the Eye vector and the Reflect vector,
    // clamped to 0
    //  - Looking into the reflection -> 1
    //  - Looking elsewhere -> < 1
    float cosAlpha = clamp(dot(E, R), 0, 1);

    if (lightEnabled == 1)
    {
        gl_FragColor.rgb = MaterialAmbientColor +
                           MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance) +
                           MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, 5) / (distance * distance);
    }
    else
    {
        gl_FragColor.rgb = MaterialAmbientColor;
    }
}