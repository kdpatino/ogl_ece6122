#version 120

// Interpolated values from the vertex shaders
varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform sampler2D myTextureSamplerWolf;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform int lightEnabled;
uniform int textureControl;
uniform vec3 InternalLightColor;
uniform float u_time;
varying vec3 LightPosition_cameraspace;


void main()
{
    // Time-dependent factor for changing internal light intensity over time
    float timeFactor = mod(u_time, 10.0) / 10.0; // Change 10.0 to control the period

    // Include the time-dependent factor in the internal light intensity
    float InternalLightIntensity = 5 * (0.5 + 0.5 * sin(6.28 * timeFactor));

    // Light emission properties
    vec3 LightColor = vec3(1, 1, 1);
    float LightPower = 50.0f;
    float disElement;
    vec3 MaterialDiffuseColor;
    // Material properties
    if (textureControl == 1)
    {
        MaterialDiffuseColor = texture2D(myTextureSampler, UV).rgb;
        disElement = 1.0f;
    }
    else
    {
        MaterialDiffuseColor = texture2D(myTextureSamplerWolf, UV).rgb;
        disElement = 0.0f;
    }

    vec3 MaterialAmbientColor = vec3(0.1, 0.1, 0.1) * MaterialDiffuseColor;
    vec3 MaterialSpecularColor = vec3(0.3, 0.3, 0.3);

    // Distance to the light
    float distanceGeneral = length(LightPosition_worldspace - Position_worldspace);
    float distance = 1.0f;

    // Normal of the computed fragment, in camera space
    vec3 n = normalize(Normal_cameraspace);
    // Direction of the light (from the fragment to the light)
    vec3 l = normalize(LightDirection_cameraspace);
    // Cosine of the angle between the normal and the light direction, clamped above 0
    float cosTheta = clamp(dot(n, l), 0, 1);

    // Eye vector (towards the camera)
    vec3 E = normalize(EyeDirection_cameraspace);
    // Direction in which the triangle reflects the light
    vec3 R = reflect(-l, n);
    // Cosine of the angle between the Eye vector and the Reflect vector, clamped to 0
    float cosAlpha = clamp(dot(E, R), 0, 1);

    vec3 generalLight = MaterialAmbientColor + 
                        MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distanceGeneral * distanceGeneral) +
                        MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, 5) / (distanceGeneral * distanceGeneral);
    
    vec3 objectLight = InternalLightColor * InternalLightIntensity * cosTheta / (distance * distance) +
                       MaterialSpecularColor * InternalLightColor * InternalLightIntensity * pow(cosAlpha, 5) / (distance * distance); 
    
    gl_FragColor.rgb = generalLight + disElement*objectLight;
}
